#!/usr/bin/env bash

appname="tube-fetch"
ver="0.1"
license="MIT License Copyright (c) 2023 Dragan"

cd "$(dirname "$0")" || exit

requireBashVersion () {
  (( "${BASH_VERSINFO[0]:-0}" < "${1/%.*}" )) && return 1
  (( "${BASH_VERSINFO[0]:-0}" == "${1/%.*}" && "${BASH_VERSINFO[1]:-0}" < "${1/#*.}" )) && return 1
  return 0
}

requireBashVersion 4.2 || {
  echo "This script requires bash version 4.2 or above." >&2
  exit 1
}

which yt-dlp >/dev/null 2>&1 || { echo -e "\033[1;31mInstall yt-dlp for this script to work.\033[0m"; exit 1; }
which jq >/dev/null 2>&1 || { echo -e "\033[1;31mInstall jq for this script to work.\033[0m"; exit 1; }
which ffmpeg >/dev/null 2>&1 || {
    echo -e "\033[1;33mInstall ffmpeg for this script to work correctly.\033[0m"
    echo "Moving on..."
    noFfmpeg=true
}

if [[ ! -r "data.json" ]]; then
    echo "Initial setup..."
    echo "Example directory: ~/Videos"
    read -r -p "Where to store downloaded videos?: " location
    json_data=$(jq -nR --arg dir "$location" '{ "ytdlp": { "download_days": "5", "download_dir": $dir, "channels": [] } } ')
    echo "$json_data" > "data.json"
    echo "Run 'yt-auto -a' to subscribe to YouTube channels or playlists"
    echo "Optionally, configure how many days back of videos should be downloaded. Default: 5 Days."
    exit 0
fi

function add_channel () {
    local data length tmp
    read -r -p "Paste channel name: " channel
    if [[ ! $channel == "https://www.youtube.com/"* ]]; then
        echo "That is not a valid YouTube link."
        exit 1
    fi
    data=$(jq '.ytdlp.channels | length' data.json)
    length=$((data+1))
    tmp=$(mktemp)
    jq --arg ytchannel "$channel" --arg len "$length" \
    '.ytdlp.channels += [{"id": $len, "link": $ytchannel}]' \
    data.json > "$tmp" && mv "$tmp" data.json
    exit 0
}

function delete_channel () {
    local tmp
    read -r -p "What channel do you want to delete? Run 'tube-fetch -l' to find out their id: " id
    if [[ $id == "" ]]; then
        echo "This field must not be blank."
        exit 1
    fi
    if [[ ! $id =~ ^[0-9]+$ ]]; then
        echo "Not a number. Try again."
        exit 1
    fi
    tmp=$(mktemp)
    jq --arg id "$id" 'del(.ytdlp.channels[] | select(.id == $id))' \
    data.json > "$tmp" && mv "$tmp" data.json
    exit 0
}

function list_channels () {
    local data
    data=$(jq -r '.ytdlp.channels[] | .id, .link' data.json)
    if [[ ! $data ]]; then
        echo "Zero channels"
    fi
    echo "$data"
    exit 0
}

function configure_download_days () {
    local tmp
    read -r -p "How many days worth of videos should be downloaded?: " days
    if [[ ! $days ]]; then
        echo "Cannot leave empty."
        exit 1
    fi
    if [[ ! $days =~ ^[0-9]+$ ]]; then
        echo "Not a number. Try again."
        exit 1
    fi
    tmp=$(mktemp)
    jq --arg d "$days" '.ytdlp.download_days = $d' \
    data.json > "$tmp" && mv "$tmp" data.json
    exit 0
}

function configure_download_dir () {
    local tmp
    read -r -p "Where to download videos?: " location
    if [[ "$location" == "" ]]; then
        echo "This field must not be blank."
        exit 1
    fi
    tmp=$(mktemp)
    jq --arg dir "$location" '.ytdlp.download_dir = $dir' \
    data.json > "$tmp" && mv "$tmp" data.json
    exit 0
}

function download_video () {
    local channels file download_days download_dir download_date
    channels=$(jq -r .ytdlp.channels[].link data.json)
    if [[ ! $channels ]]; then
        echo -e "\033[1;31mAdd channel or playlist links with 'tube-fetch -a' before running 'tube-fetch'\033[0m"
        exit 1
    fi
    file="%(channel)s/%(upload_date)s - %(title)s.%(ext)s"
    download_days=$(jq -r .ytdlp.download_days data.json)
    download_dir=$(jq -r .ytdlp.download_dir data.json)
    download_date="$(date -d  "$download_days days ago" '+%Y%m%d')"
    if [[ $noFfmpeg ]]; then
        for channel in $channels; do
            yt-dlp --break-on-reject \
            --dateafter "$download_date" \
            --output "$download_dir/$file" "$channel"
        done
        exit 0
    fi
    for channel in $channels; do
        yt-dlp -ciw -S "+res:1080,vcodec:vp9,acodec:opus" \
        --embed-chapters --embed-subs --sub-langs=en \
        --merge-output-format mkv --break-on-reject \
        --dateafter "$download_date" \
        --output "$download_dir/$file" "$channel"
    done
    exit 0
}

function print_version {
    echo "$appname $ver"
    echo "$license"
    exit 0
}

function print_help() {
    echo "Usage:" 
    echo "    " "tube-fetch""                                       Checks for new videos and then downloads them."
    echo "    " "tube-fetch [options]"
    echo ""
    echo "Options:"
    echo "    " "--help, -h""                                       Help menu"
    echo "    " "-l""                                               List subscribed channels."
    echo "    " "-a""                                               Add channel or a playlist."
    echo "    " "-c""                                               Configure how many days worth of videos to download."
    echo "    " "-d""                                               Configure in which directory videos get downloaded to."
    echo "    " "-del""                                             Delete a channel or a playlist."
    echo "    " "--version, -v""                                    Prints app name, version and license."
    exit 0
}

function err_msg() { echo "Invalid argument. Run 'yt-auto --help' for help."; exit 0; }

case "$1" in
    "") download_video ;;
    "-a") add_channel ;;
    "-del") delete_channel ;;
    "-l") list_channels ;;
    "-c") configure_download_days ;;
    "-d") configure_download_dir ;;
    "-h") print_help ;;
    "--help") print_help ;;
    "-v") print_version ;;
    "--version") print_version ;;
    *) err_msg ;;
esac